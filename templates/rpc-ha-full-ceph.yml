heat_template_version: 2013-05-23

description: Deploy A Rackspace Private Cloud - HA Compute + Block + Object + Ceph Environment

parameters:
  ansible_tags:
    type: string
    label: Ansible Tags
    default: 'prepare'
  ansible_repo:
    type: string
    label: git repo to clone for ansible
    default: 'https://github.com/ansible/ansible'
  ansible_version:
    type: string
    label: git tag/branch/sha to install ansible form
    default: 'v1.9.4-1'
  rpc_release:
    type: string
    label: RPC Release
    default: 'r11.1.4'
  rpc_heat_ansible_playbook:
    type: string
    label: RPC Heat Ansible Playbook
    default: ''
  rpc_heat_ansible_release:
    type: string
    label: RPC Heat Ansible Release
    default: 'master'
  rpc_heat_ansible_repo:
    type: string
    label: RPC Heat Ansible Repo
    default : 'https://github.com/cloud-training/rpc-heat-ansible.git'
  rackspace_cloud_auth_url:
    type: string
    label: Rackspace Cloud Auth URL
    default: 'https://identity.api.rackspacecloud.com/v2.0'
  rackspace_cloud_tenant_id:
    type: string
    label: Rackspace Cloud Tenant ID
    default: 'SomeTenantID'
  rackspace_cloud_username:
    type: string
    label: Rackspace Cloud Username
    default: 'SomeUserName'
  rackspace_cloud_password:
    type: string
    label: Rackspace Cloud Password
    default: 'SomeUsersPassword'
  rackspace_cloud_api_key:
    type: string
    label: Rackspace Cloud API Key
    default: 'SomeAPIKey'
  maas_notification_email_address:
    type: string
    label: MaaS Notification Email Address
    default: 'rpc-maas-alerts@mg.cloudtrain.me'
  apply_patches:
    type: string
    label: Apply Patches
    default: True
    constraints:
      - allowed_values:
        - True
        - False
  deploy_retries:
    type: number
    label: Deploy Retries
    default: 2
  infra_flavor:
    type: string
    label: Infra Node Flavor
    default: '8 GB Performance'
  logger_flavor:
    type: string
    label: Logger Node Flavor
    default: '4 GB Performance'
  compute_flavor:
    type: string
    label: Compute Node Flavor
    default: '4 GB Performance'
  block_flavor:
    type: string
    label: Block Node Flavor
    default: '4 GB Performance'
  object_flavor:
    type: string
    label: Object Node Flavor
    default: '2 GB Performance'
  ceph_flavor:
    type: string
    label: Ceph Node Flavor
    default: '8 GB Performance'

resources:
  notification:
    type: Rackspace::CloudMonitoring::Notification
    properties:
      label:
        str_replace:
          template: "%heat_stack_prefix%-rpc-notification"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      type: email
      details:
        address: { get_param: "maas_notification_email_address" }

  notification_plan:
    type: Rackspace::CloudMonitoring::NotificationPlan
    properties:
      label:
        str_replace:
          template: "%heat_stack_prefix%-rpc-notification-plan"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      warning_state:
      - { get_resource: notification }
      critical_state:
      - { get_resource: notification }
      ok_state:
      - { get_resource: notification }

  password:
    type: OS::Heat::RandomString
    properties:
      length: 12
      sequence: lettersdigits

  keypair:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-rpc-keypair"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      save_private_key: True

  network:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-rpc-network"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: network }
      cidr: 192.168.2.0/24
      name:
        str_replace:
          template: "%heat_stack_prefix%-rpc-subnet"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }

  swift_signal_handle_infra1:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_infra2:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_infra3:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_logger1:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_compute1:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_compute2:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_block1:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_object1:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_ceph1:
      type: OS::Heat::SwiftSignalHandle

  swift_signal_infra1:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_infra1 }
      count: 1
      timeout: 14400

  swift_signal_infra2:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_infra2 }
      count: 1
      timeout: 7200

  swift_signal_infra3:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_infra3 }
      count: 1
      timeout: 7200

  swift_signal_logger1:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_logger1 }
      count: 1
      timeout: 7200

  swift_signal_compute1:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_compute1 }
      count: 1
      timeout: 7200

  swift_signal_compute2:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_compute2 }
      count: 1
      timeout: 7200

  swift_signal_block1:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_block1 }
      count: 1
      timeout: 7200

  swift_signal_object1:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_object1 }
      count: 1
      timeout: 7200

  swift_signal_ceph1:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_ceph1 }
      count: 1
      timeout: 7200

  cloud_config_infra1:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - linux-image-extra-virtual
          - tmux
          - htop
          - multitail
          - build-essential
          - software-properties-common
          - python-software-properties
          - curl
          - git-core
          - python-pip
          - python-apt
          - python-dev
          - libffi-dev
          - libssl-dev
        write_files:
          - path: /opt/cloud-training/id_rsa
            permissions: "0600"
            content: { get_attr: [ keypair, private_key ] }
          - path: /opt/cloud-training/inventory
            permissions: "0600"
            content:
              str_replace:
                template: |
                  [all:vars]
                  ansible_ssh_user=root
                  ansible_ssh_private_key_file=/opt/cloud-training/id_rsa
                  heat_stack_prefix=%heat_stack_prefix%
                  heat_stack_id=%heat_stack_id%
                  heat_stack_name=%heat_stack_name%
                  heat_stack_password=%heat_stack_password%
                  rackspace_cloud_auth_url=%rackspace_cloud_auth_url%
                  rackspace_cloud_tenant_id=%rackspace_cloud_tenant_id%
                  rackspace_cloud_username=%rackspace_cloud_username%
                  rackspace_cloud_password=%rackspace_cloud_password%
                  rackspace_cloud_api_key=%rackspace_cloud_api_key%
                  rpc_release=%rpc_release%
                  apply_patches=%apply_patches%
                  deploy_retries=%deploy_retries%
                  maas_notification_plan=%maas_notification_plan%
                  
                  [all]
                  infra1      ansible_connection=local    node_id=1
                  infra2      ansible_ssh_host=%server_infra2_ip%    node_id=2
                  infra3      ansible_ssh_host=%server_infra3_ip%    node_id=3
                  logger1     ansible_ssh_host=%server_logger1_ip%    node_id=4
                  compute1    ansible_ssh_host=%server_compute1_ip%    node_id=5
                  compute2    ansible_ssh_host=%server_compute2_ip%    node_id=6
                  block1      ansible_ssh_host=%server_block1_ip%    node_id=7
                  object1     ansible_ssh_host=%server_object1_ip%    node_id=8
                  ceph1       ansible_ssh_host=%server_ceph1_ip%    node_id=9
                  
                  [infra]
                  infra1
                  infra2
                  infra3
                  
                  [logger]
                  logger1
                  
                  [compute]
                  compute1
                  compute2
                  
                  [block]
                  block1
                  
                  [object]
                  object1
                  
                  [ceph]
                  ceph1
                params:
                  "%heat_stack_prefix%":         { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
                  "%heat_stack_id%":             { get_param: "OS::stack_id" }
                  "%heat_stack_name%":           { get_param: "OS::stack_name" }
                  "%heat_stack_password%":       { get_attr: [ password, value ] }
                  "%rackspace_cloud_auth_url%":  { get_param: "rackspace_cloud_auth_url" }
                  "%rackspace_cloud_tenant_id%": { get_param: "rackspace_cloud_tenant_id" }
                  "%rackspace_cloud_username%":  { get_param: "rackspace_cloud_username" }
                  "%rackspace_cloud_password%":  { get_param: "rackspace_cloud_password" }
                  "%rackspace_cloud_api_key%":   { get_param: "rackspace_cloud_api_key" }
                  "%rpc_release%":               { get_param: "rpc_release" }
                  "%apply_patches%":             { get_param: "apply_patches" }
                  "%deploy_retries%":            { get_param: "deploy_retries" }
                  "%maas_notification_plan%":    { get_resource: notification_plan }
                  "%server_infra2_ip%":          { get_attr: [ server_infra2, accessIPv4 ] }
                  "%server_infra3_ip%":          { get_attr: [ server_infra3, accessIPv4 ] }
                  "%server_logger1_ip%":         { get_attr: [ server_logger1, accessIPv4 ] }
                  "%server_compute1_ip%":        { get_attr: [ server_compute1, accessIPv4 ] }
                  "%server_compute2_ip%":        { get_attr: [ server_compute2, accessIPv4 ] }
                  "%server_block1_ip%":          { get_attr: [ server_block1, accessIPv4 ] }
                  "%server_object1_ip%":         { get_attr: [ server_object1, accessIPv4 ] }
                  "%server_ceph1_ip%":           { get_attr: [ server_ceph1, accessIPv4 ] }
          - path: /opt/cloud-training/runcmd-bash
            permissions: "0700"
            content:
              str_replace:
                template: |
                  #!/bin/bash
                  export HOME="/root"
                  set -e
                  set -x
                  function exit_failure {
                    %swift_signal_notify% --data-binary '{"status": "FAILURE", "reason": "'"$@"'"}'
                    exit 1
                  }
                  function exit_success {
                    %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
                  }
                  function get_rpc_series {
                    if [[ "$@" == "juno" ]]; then
                        export RPC_SERIES="10.1"
                    elif [[ "$@" == "kilo" ]]; then
                        export RPC_SERIES="11.1"
                    elif [[ "$@" == "liberty-12.0" || "$@" == "master" ]]; then
                        export RPC_SERIES="12.0"
                    else
                        export RPC_SERIES=`echo $@ | sed 's/^r//g' | awk -F '[\.]' '{ print $1 "." $2 }'`
                    fi
                  }
                  function install_ansible {
                    git clone --recursive "%ansible_repo%" /opt/ansible
                    pushd /opt/ansible
                      git checkout "%ansible_version%"
                      git submodule init
                      git submodule update
                      pip install . || exit_failure "PIP Install Ansible Failure"
                    popd
                    mkdir -p /etc/ansible/facts.d
                    cat > /etc/ansible/facts.d/ansible_git.fact <<EOF
                  [facts]
                  git_repo=%ansible_repo%
                  git_branch=%ansible_version%
                  EOF
                  }
                  get_rpc_series %rpc_release%
                  /usr/bin/pip install --upgrade pip || exit_failure "PIP Upgrade PIP Failure"
                  /usr/local/bin/pip install pip==1.5.6 || exit_failure "PIP Install PIP Failure"
                  install_ansible
                  cd /opt/cloud-training
                  # BEGIN - Terrible Chicken Egg Hack
                  export MY_PUBLIC_IP=`curl -s http://ipv4.icanhazip.com/`
                  sed -i "s/ansible_connection=local/ansible_ssh_host=$MY_PUBLIC_IP/" inventory
                  # END - Terrible Chicken Egg Hack
                  git clone %rpc_heat_ansible_repo% -b %rpc_heat_ansible_release% || exit_failure "Git Clone Failure"
                  cd /opt/cloud-training/rpc-heat-ansible/playbooks
                  if [[ "%rpc_heat_ansible_repo%" != "https://github.com/cloud-training/rpc-heat-ansible.git" ]]; then
                    git remote add upstream https://github.com/cloud-training/rpc-heat-ansible.git
                  fi
                  if [ -z "%rpc_heat_ansible_playbook%" ]
                  then
                    playbook="rpc-$RPC_SERIES-playbook.yml"
                  else
                    playbook="%rpc_heat_ansible_playbook%"
                  fi
                  ansible-playbook $playbook -v --tags %ansible_tags% \
                    || exit_failure "Ansible Playbook Run Failure: $(tail -vn100000 /var/log/syslog /var/log/cloud-init* /opt/cloud-training/runcmd-* |nc termbin.com 9999)"
                  exit_success
                params:
                  "%swift_signal_notify%": { get_attr: [ swift_signal_handle_infra1, curl_cli ] }
                  "%ansible_tags%": { get_param: "ansible_tags" }
                  "%rpc_heat_ansible_release%": { get_param: "rpc_heat_ansible_release" }
                  "%rpc_heat_ansible_repo%": { get_param: "rpc_heat_ansible_repo" }
                  "%rpc_release%": { get_param: "rpc_release" }
                  "%rpc_heat_ansible_playbook%": { get_param: "rpc_heat_ansible_playbook" }
                  "%ansible_repo%": { get_param: "ansible_repo" }
                  "%ansible_version%": { get_param: "ansible_version" }
        runcmd:
          - tmux new-session -s rpc-heat-ansible -d
          - tmux rename-window runcmd-bash
          - tmux new-window -n runcmd-bash-logs
          - tmux new-window -n deploy-sh-logs
          - tmux select-window -t runcmd-bash-logs
          - tmux send-keys "touch /opt/cloud-training/runcmd-bash.err /opt/cloud-training/runcmd-bash.log" C-m
          - tmux send-keys "multitail /opt/cloud-training/runcmd-bash.err /opt/cloud-training/runcmd-bash.log" C-m
          - tmux select-window -t deploy-sh-logs
          - tmux send-keys "touch /opt/cloud-training/deploy.sh.err /opt/cloud-training/deploy.sh.log" C-m
          - tmux send-keys "multitail /opt/cloud-training/deploy.sh.err /opt/cloud-training/deploy.sh.log" C-m
          - tmux select-window -t runcmd-bash
          - tmux send-keys "/opt/cloud-training/runcmd-bash >> /opt/cloud-training/runcmd-bash.log 2>> /opt/cloud-training/runcmd-bash.err" C-m

  cloud_config_infra2:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_infra2, curl_cli ] }

  cloud_config_infra3:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_infra3, curl_cli ] }

  cloud_config_logger1:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_logger1, curl_cli ] }

  cloud_config_compute1:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_compute1, curl_cli ] }

  cloud_config_compute2:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_compute2, curl_cli ] }

  cloud_config_block1:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_block1, curl_cli ] }

  cloud_config_object1:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_object1, curl_cli ] }

  cloud_config_ceph1:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_ceph1, curl_cli ] }

  server_infra1:
    type: OS::Nova::Server
    depends_on: [ swift_signal_infra2, swift_signal_infra3, swift_signal_logger1, swift_signal_compute1, swift_signal_compute2, swift_signal_block1, swift_signal_object1, swift_signal_ceph1 ]
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-infra1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: { get_param: "infra_flavor" }
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PV)
      diskConfig: AUTO
      block_device_mapping:
        - device_name: /dev/xvdz
          volume_id: { get_resource: volume_infra1 }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_infra1 }

  server_infra2:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-infra2"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: { get_param: "infra_flavor" }
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PV)
      diskConfig: AUTO
      block_device_mapping:
        - device_name: /dev/xvdz
          volume_id: { get_resource: volume_infra2 }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_infra2 }

  server_infra3:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-infra3"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: { get_param: "infra_flavor" }
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PV)
      diskConfig: AUTO
      block_device_mapping:
        - device_name: /dev/xvdz
          volume_id: { get_resource: volume_infra3 }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_infra3 }

  server_logger1:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-logger1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: { get_param: "logger_flavor" }
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PV)
      diskConfig: AUTO
      block_device_mapping:
        - device_name: /dev/xvdz
          volume_id: { get_resource: volume_logger1 }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_logger1 }

  server_compute1:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-compute1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: { get_param: "compute_flavor" }
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PV)
      diskConfig: AUTO
      block_device_mapping:
        - device_name: /dev/xvdz
          volume_id: { get_resource: volume_compute1 }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_compute1 }

  server_compute2:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-compute2"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: { get_param: "compute_flavor" }
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PV)
      diskConfig: AUTO
      block_device_mapping:
        - device_name: /dev/xvdz
          volume_id: { get_resource: volume_compute2 }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_compute2 }

  server_block1:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-block1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: { get_param: "block_flavor" }
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PV)
      diskConfig: AUTO
      block_device_mapping:
        - device_name: /dev/xvdz
          volume_id: { get_resource: volume_block1 }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_block1 }

  server_object1:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-object1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: { get_param: "object_flavor" }
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PV)
      diskConfig: AUTO
      block_device_mapping:
        - device_name: /dev/xvdz
          volume_id: { get_resource: volume_object1 }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_object1 }

  server_ceph1:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-ceph1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: { get_param: "ceph_flavor" }
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PV)
      diskConfig: AUTO
      block_device_mapping:
        - device_name: /dev/xvdx
          volume_id: { get_resource: volume_ceph1_data3 }
        - device_name: /dev/xvdy
          volume_id: { get_resource: volume_ceph1_data2 }
        - device_name: /dev/xvdz
          volume_id: { get_resource: volume_ceph1_data1 }
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_ceph1 }

  volume_infra1:
    type: OS::Cinder::Volume
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-infra1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      size: 170
      volume_type: SSD

  volume_infra2:
    type: OS::Cinder::Volume
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-infra2"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      size: 170
      volume_type: SSD

  volume_infra3:
    type: OS::Cinder::Volume
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-infra3"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      size: 170
      volume_type: SSD

  volume_logger1:
    type: OS::Cinder::Volume
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-logger1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      size: 75
      volume_type: SSD

  volume_compute1:
    type: OS::Cinder::Volume
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-compute1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      size: 75
      volume_type: SSD

  volume_compute2:
    type: OS::Cinder::Volume
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-compute2"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      size: 75
      volume_type: SSD

  volume_block1:
    type: OS::Cinder::Volume
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-block1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      size: 75
      volume_type: SSD

  volume_object1:
    type: OS::Cinder::Volume
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-object1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      size: 150
      volume_type: SSD

  volume_ceph1_data1:
    type: OS::Cinder::Volume
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-ceph1-data1"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      size: 75

  volume_ceph1_data2:
    type: OS::Cinder::Volume
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-ceph1-data2"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      size: 75

  volume_ceph1_data3:
    type: OS::Cinder::Volume
    properties:
      name:
        str_replace:
          template: "%heat_stack_prefix%-ceph1-data3"
          params:
            "%heat_stack_prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      size: 75

outputs:
  password:
    description: Password
    value: { get_attr: [ password, value ] }
  private_key:
    description: Private Key
    value: { get_attr: [ keypair, private_key ] }
  server_infra1_ip:
    description: Infra1 IP
    value: { get_attr: [ server_infra1, accessIPv4 ] }
  all_ips:
    description: All IPs
    value:
      str_replace:
        template: |
          infra1   - %server_infra1_ip%
          infra2   - %server_infra2_ip%
          infra3   - %server_infra3_ip%
          logger1  - %server_logger1_ip%
          compute1 - %server_compute1_ip%
          compute2 - %server_compute2_ip%
          block1   - %server_block1_ip%
          object1  - %server_object1_ip%
          ceph1    - %server_ceph1_ip%
        params:
          "%server_infra1_ip%":   { get_attr: [ server_infra1, accessIPv4 ] }
          "%server_infra2_ip%":   { get_attr: [ server_infra2, accessIPv4 ] }
          "%server_infra3_ip%":   { get_attr: [ server_infra3, accessIPv4 ] }
          "%server_logger1_ip%":  { get_attr: [ server_logger1, accessIPv4 ] }
          "%server_compute1_ip%": { get_attr: [ server_compute1, accessIPv4 ] }
          "%server_compute2_ip%": { get_attr: [ server_compute2, accessIPv4 ] }
          "%server_block1_ip%":   { get_attr: [ server_block1, accessIPv4 ] }
          "%server_object1_ip%":  { get_attr: [ server_object1, accessIPv4 ] }
          "%server_ceph1_ip%":    { get_attr: [ server_ceph1, accessIPv4 ] }
